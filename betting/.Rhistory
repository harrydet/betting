source ('clean_data.R')
source ('clean_data.R')
source ('clean_data.R')
# get score of a match
get_score <- function (home, away){
# try to get from history, pair
subset <- hist_pair.pl[ which( hist_pair.pl$HomeTeam ==home & hist_pair.pl$AwayTeam ==away), ]
# only use this method if we have at least 4 matches
if ((dim(subset)[1] == 1) & (subset$match[1] > 3)){
h_scored = rpois(1, subset$ave_home_scored[1])
a_scored = rpois(1, subset$ave_away_scored[1])
}
# if we have no historical result of the match
else{
# take into account both attacking stat of home and defense stats of away
h_scored = rpois(1, 1/2 * (ave[ave$Team == home,]$ave_scored_h +
ave[ave$Team == away,]$ave_conceded_a))
a_scored = rpois(1, 1/2 * (ave[ave$Team == away,]$ave_scored_a +
ave[ave$Team == home,]$ave_conceded_h))
}
return (list(h_scored, a_scored))
}
rank <- function (m_result){
table <- data.frame(name = teams,
goal_score = rep(0,20),
goal_conceded = rep(0,20),
point = rep(0,20))
# loop through all the results and then update
for (i in 1:nrow(m_result)){
home = m_result$HOME.TEAM[i]
away = m_result$AWAY.TEAM[i]
h_goal = m_result$h_scored[i]
a_goal = m_result$a_scored[i]
# add goal
table[table$name == home,]$goal_score = table[table$name == home,]$goal_score + h_goal
table[table$name == home,]$goal_conceded = table[table$name == home,]$goal_conceded + a_goal
table[table$name == away,]$goal_score = table[table$name == away,]$goal_score + a_goal
table[table$name == away,]$goal_conceded = table[table$name == away,]$goal_conceded + h_goal
# calculate point
if (h_goal > a_goal){
table[table$name == home,]$point = table[table$name == home,]$point + 3
}
else if (h_goal < a_goal){
table[table$name == away,]$point = table[table$name == away,]$point + 3
}
else{
table[table$name == home,]$point = table[table$name == home,]$point + 1
table[table$name == away,]$point = table[table$name == away,]$point + 1
}
}
table$goal_dif <- table$goal_score - table$goal_conceded
table <- table[order(-table$point, -table$goal_dif, -table$goal_score), ]
return (table)
}
simulate <- function(fixtures){
matches <- mapply(get_score, fixtures$HOME.TEAM, fixtures$AWAY.TEAM, SIMPLIFY = FALSE)
fixtures$h_scored <- unlist(sapply(matches, function(x) x[1]))
fixtures$a_scored <- unlist(sapply(matches, function(x) x[2]))
table <- rank(fixtures)
return (table)
}
nsim = 10000
tabulate_data <- data.frame(name = teams,
champion = rep(0,20),
runner_up = rep(0,20),
top_4 = rep(0,20),
top_6 = rep(0,20),
relegate = rep(0,20))
View(fixtures)
library (dplyr)
source ('clean_data.R')
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
# get the team
teams <- unique(fixtures$HOME.TEAM)
View(fixtures)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
# get the team
teams <- unique(fixtures$HOME.TEAM)
View(fixtures)
# extract historic results
history <- read.csv("history.csv", stringsAsFactors = FALSE)
View(fixtures)
View(history)
########################################
# scripts to clean data to usable format
# pipe directly to sim.R
# source:
# - fixtures.csv: dedicatedexcel.com
# - Historical results: https://www.kaggle.com/thefc17/epl-results-19932018
#########################################
library (dplyr)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
# get the team
teams <- unique(fixtures$HOME.TEAM)
# extract historic results
history <- read.csv("history.csv", stringsAsFactors = FALSE)
# get info from the 2010 up to 2018
seasons <- sapply(10:17, function(x) paste0(2000+x,'-',x+1))
recent.pl <- history %>%
filter(Season %in% seasons, "div" == 'E0')
View(recent.pl)
View(history)
View(fixtures)
source ('clean_data.R')
View(fixtures)
View(recent.pl)
View(hist_pair.pl)
View(ave)
View(fixtures)
View(recent.pl)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
View(fixtures)
View(fixtures)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
View(fixtures)
View(hist_pair.pl)
library (dplyr)
source ('clean_data.R')
# get score of a match
get_score <- function (home, away){
# try to get from history, pair
subset <- hist_pair.pl[ which( hist_pair.pl$HomeTeam ==home & hist_pair.pl$AwayTeam ==away), ]
# only use this method if we have at least 4 matches
if ((dim(subset)[1] == 1) & (subset$match[1] > 3)){
h_scored = rpois(1, subset$ave_home_scored[1])
a_scored = rpois(1, subset$ave_away_scored[1])
}
# if we have no historical result of the match
else{
# take into account both attacking stat of home and defense stats of away
h_scored = rpois(1, 1/2 * (ave[ave$Team == home,]$ave_scored_h +
ave[ave$Team == away,]$ave_conceded_a))
a_scored = rpois(1, 1/2 * (ave[ave$Team == away,]$ave_scored_a +
ave[ave$Team == home,]$ave_conceded_h))
}
return (list(h_scored, a_scored))
}
rank <- function (m_result){
table <- data.frame(name = teams,
goal_score = rep(0,20),
goal_conceded = rep(0,20),
point = rep(0,20))
# loop through all the results and then update
for (i in 1:nrow(m_result)){
home = m_result$HOME.TEAM[i]
away = m_result$AWAY.TEAM[i]
h_goal = m_result$h_scored[i]
a_goal = m_result$a_scored[i]
# add goal
table[table$name == home,]$goal_score = table[table$name == home,]$goal_score + h_goal
table[table$name == home,]$goal_conceded = table[table$name == home,]$goal_conceded + a_goal
table[table$name == away,]$goal_score = table[table$name == away,]$goal_score + a_goal
table[table$name == away,]$goal_conceded = table[table$name == away,]$goal_conceded + h_goal
# calculate point
if (h_goal > a_goal){
table[table$name == home,]$point = table[table$name == home,]$point + 3
}
else if (h_goal < a_goal){
table[table$name == away,]$point = table[table$name == away,]$point + 3
}
else{
table[table$name == home,]$point = table[table$name == home,]$point + 1
table[table$name == away,]$point = table[table$name == away,]$point + 1
}
}
table$goal_dif <- table$goal_score - table$goal_conceded
table <- table[order(-table$point, -table$goal_dif, -table$goal_score), ]
return (table)
}
simulate <- function(fixtures){
matches <- mapply(get_score, fixtures$HOME.TEAM, fixtures$AWAY.TEAM, SIMPLIFY = FALSE)
fixtures$h_scored <- unlist(sapply(matches, function(x) x[1]))
fixtures$a_scored <- unlist(sapply(matches, function(x) x[2]))
table <- rank(fixtures)
return (table)
}
nsim = 10000
tabulate_data <- data.frame(name = teams,
champion = rep(0,20),
runner_up = rep(0,20),
top_4 = rep(0,20),
top_6 = rep(0,20),
relegate = rep(0,20))
pb <- txtProgressBar(min = 0, max = nsim, style = 3)
for (sim in 1:nsim){
table = simulate(fixtures)
first = table$name[1]
second = table$name[2]
first_4 = table$name[1:4]
first_6 = table$name[1:6]
last_3 = table$name[18:20]
tabulate_data <- tabulate_data %>%
mutate(champion = ifelse(name == first, champion+1, champion),
runner_up = ifelse(name == second, runner_up+1, runner_up),
top_4 = ifelse(name %in% first_4, top_4+1, top_4),
top_6 = ifelse(name %in% first_6, top_6+1, top_6),
relegate = ifelse(name %in% last_3, relegate+1, relegate))
setTxtProgressBar(pb, sim)
}
View(fixtures)
View(hist_pair.pl)
View(tabulate_data)
View(fixtures)
View(fixtures)
for (sim in 1:nsim){
table = simulate(fixtures)
first = table$name[1]
second = table$name[2]
first_4 = table$name[1:4]
first_6 = table$name[1:6]
last_3 = table$name[18:20]
tabulate_data <- tabulate_data %>%
mutate(champion = ifelse(name == first, champion+1, champion),
runner_up = ifelse(name == second, runner_up+1, runner_up),
top_4 = ifelse(name %in% first_4, top_4+1, top_4),
top_6 = ifelse(name %in% first_6, top_6+1, top_6),
relegate = ifelse(name %in% last_3, relegate+1, relegate))
setTxtProgressBar(pb, sim)
}
debugSource('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/sim.R')
View(m_result)
source ('clean_data.R')
View(fixtures)
debugSource('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/sim.R')
View(matches)
View(fixtures)
debugSource('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/sim.R')
subset <- hist_pair.pl[ which( hist_pair.pl$HomeTeam ==home & hist_pair.pl$AwayTeam ==away), ]
tabulate_data <- data.frame(name = teams,
champion = rep(0,20),
runner_up = rep(0,20),
top_4 = rep(0,20),
top_6 = rep(0,20),
relegate = rep(0,20))
pb <- txtProgressBar(min = 0, max = nsim, style = 3)
for (sim in 1:nsim){
table = simulate(fixtures)
first = table$name[1]
second = table$name[2]
first_4 = table$name[1:4]
first_6 = table$name[1:6]
last_3 = table$name[18:20]
tabulate_data <- tabulate_data %>%
mutate(champion = ifelse(name == first, champion+1, champion),
runner_up = ifelse(name == second, runner_up+1, runner_up),
top_4 = ifelse(name %in% first_4, top_4+1, top_4),
top_6 = ifelse(name %in% first_6, top_6+1, top_6),
relegate = ifelse(name %in% last_3, relegate+1, relegate))
setTxtProgressBar(pb, sim)
}
View(subset)
View(hist_pair.pl)
View(recent.pl)
source ('clean_data.R')
View(recent.pl)
View(hist_pair.pl)
View(ave)
########################################
# scripts to clean data to usable format
# pipe directly to sim.R
# source:
# - fixtures.csv: dedicatedexcel.com
# - Historical results: https://www.kaggle.com/thefc17/epl-results-19932018
#########################################
library (dplyr)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE)
# get the team
teams <- unique(fixtures$HOME.TEAM)
# extract historic results
history <- read.csv("history.csv", stringsAsFactors = FALSE)
View(fixtures)
View(history)
# get info from the 2010 up to 2018
seasons <- sapply(10:17, function(x) paste0(2000+x,'-',x+1))
seasons
teams
recent.pl <- history %>%
filter(Season %in% seasons, "div" == 'E0')
View(recent.pl)
recent.pl <- history %>%
filter(Season %in% seasons, o.ΏDiv == 'E0')
# because the two data comes from different source, so the teams name don't match
teams[!teams %in% recent.pl$HomeTeam]
recent.pl <- history %>%
filter(Season %in% seasons, o.ΏDiv == 'E0')
########################################
# scripts to clean data to usable format
# pipe directly to sim.R
# source:
# - fixtures.csv: dedicatedexcel.com
# - Historical results: https://www.kaggle.com/thefc17/epl-results-19932018
#########################################
library (dplyr)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM")
View(fixtures)
# get the team
teams <- unique(fixtures$HOME.TEAM)
# extract historic results
history <- read.csv("history.csv", stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM")
View(history)
# get info from the 2010 up to 2018
seasons <- sapply(10:17, function(x) paste0(2000+x,'-',x+1))
recent.pl <- history %>%
filter(Season %in% seasons, o.ΏDiv == 'E0')
recent.pl <- history %>%
filter(Season %in% seasons, Div == 'E0')
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/sim.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/sim.R')
View(tabulate_data)
View(table)
View(hist_pair.pl)
View(ave)
View(tabulate_data)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
install.packages("tidyverse")
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
library(tidyverse)
source("prediction.R")
library (dplyr)
source ('clean_data.R')
# function to simplify result
# from scoreline to who wins the match, H (Home), A(Away) or D(Draw)
result_calc <- function (h_goal, a_goal){
result = ifelse(h_goal == a_goal, 'D', ifelse(h_goal > a_goal, 'H', 'A'))
return (result)
}
# function to calibrate results
# The idea is to make sure that if Probability of wining of Home and Away is tight
# e.g: 0.451(H) vs 0.447 (A)
# then it should be thought as a draw
result_calibrate <- function(prob_h, prob_d, prob_a){
result = ifelse(abs(prob_h - prob_a) < 0.01, "D",
ifelse (prob_h == pmax(prob_d,prob_h,prob_a), "H",
ifelse(prob_d == pmax(prob_h,prob_d,prob_a), "D", "A" )))
return (result)
}
# get most frequent score line of a match after n, sim time
get_score <- function (home, away, nsim){
# try to get from history, pair
subset <- hist_pair.pl[ which( hist_pair.pl$HomeTeam ==home | hist_pair.pl$AwayTeam ==away), ]
# more efficient code, no need to retract back to dataframe many times
ave_h_s = subset$ave_home_scored[1]
ave_a_s = subset$ave_away_scored[1]
t_ave_h_s = ave[ave$Team == home,]$ave_scored_h
t_ave_a_c = ave[ave$Team == away,]$ave_conceded_a
t_ave_h_c = ave[ave$Team == home,]$ave_conceded_h
t_ave_a_s = ave[ave$Team == away,]$ave_scored_a
result = character(length(nsim))
for (i in 1:nsim){
if ((dim(subset)[1] == 1) & (subset$match[1] > 3)){
h_scored = rpois(1, ave_h_s)
a_scored = rpois(1, ave_a_s)
}
# if we have no historical result of the match
else{
# take into account both attacking stat of home and defense stats of away
h_scored = rpois(1, 1/2 * (t_ave_h_s + t_ave_a_c))
a_scored = rpois(1, 1/2 * (t_ave_a_s + t_ave_h_c))
}
result[i] = result_calc(h_scored, a_scored)
}
result_tab  = table(result)/nsim
return (c(result_tab['H'], result_tab['D'], result_tab['A']))
}
nsim = 10000
matches <- mapply(get_score, new_season$HomeTeam, new_season$AwayTeam, nsim, SIMPLIFY = FALSE)
new_season$H <- sapply(matches, function(x) x[1])
library (dplyr)
source ('clean_data.R')
# function to simplify result
# from scoreline to who wins the match, H (Home), A(Away) or D(Draw)
result_calc <- function (h_goal, a_goal){
result = ifelse(h_goal == a_goal, 'D', ifelse(h_goal > a_goal, 'H', 'A'))
return (result)
}
# function to calibrate results
# The idea is to make sure that if Probability of wining of Home and Away is tight
# e.g: 0.451(H) vs 0.447 (A)
# then it should be thought as a draw
result_calibrate <- function(prob_h, prob_d, prob_a){
result = ifelse(abs(prob_h - prob_a) < 0.01, "D",
ifelse (prob_h == pmax(prob_d,prob_h,prob_a), "H",
ifelse(prob_d == pmax(prob_h,prob_d,prob_a), "D", "A" )))
return (result)
}
# get most frequent score line of a match after n, sim time
get_score <- function (home, away, nsim){
# try to get from history, pair
subset <- hist_pair.pl[ which( hist_pair.pl$HomeTeam ==home | hist_pair.pl$AwayTeam ==away), ]
# more efficient code, no need to retract back to dataframe many times
ave_h_s = subset$ave_home_scored[1]
ave_a_s = subset$ave_away_scored[1]
t_ave_h_s = ave[ave$Team == home,]$ave_scored_h
t_ave_a_c = ave[ave$Team == away,]$ave_conceded_a
t_ave_h_c = ave[ave$Team == home,]$ave_conceded_h
t_ave_a_s = ave[ave$Team == away,]$ave_scored_a
result = character(length(nsim))
for (i in 1:nsim){
if ((dim(subset)[1] == 1) & (subset$match[1] > 3)){
h_scored = rpois(1, ave_h_s)
a_scored = rpois(1, ave_a_s)
}
# if we have no historical result of the match
else{
# take into account both attacking stat of home and defense stats of away
h_scored = rpois(1, 1/2 * (t_ave_h_s + t_ave_a_c))
a_scored = rpois(1, 1/2 * (t_ave_a_s + t_ave_h_c))
}
result[i] = result_calc(h_scored, a_scored)
}
result_tab  = table(result)/nsim
return (c(result_tab['H'], result_tab['D'], result_tab['A']))
}
matches <- mapply(get_score, new_season$HomeTeam, new_season$AwayTeam, nsim, SIMPLIFY = FALSE)
source("prediction.R")
source("prediction.R")
setwd("betting")
getwd()
library(tidyverse)
source('prediction.R')
library(tidyverse)
source('prediction.R')
View(fixtures)
View(fixtures)
View(fixtures)
View(ave)
View(recent.pl)
View(hist_pair.pl)
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(df_prediction)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
warnings()
View(df_prediction)
View(df_prediction)
View(recent.pl)
View(hist_pair.pl)
View(matches)
View(fixtures)
mapply()
mapply() help
mapply
View(recent.pl)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(new_season)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/clean_data.R')
View(recent.pl)
View(fixtures)
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM")
fixtures <- read.csv("fixtures.csv", stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM")
# get the team
teams <- unique(fixtures$HOME.TEAM)
# extract historic results
history <- read.csv("history.csv", stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM")
# get info from the 2010 up to 2018
seasons <- sapply(10:17, function(x) paste0(2000+x,'-',x+1))
recent.pl <- history %>%
filter(Season %in% seasons, Div == 'E0')
View(history)
View(fixtures)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(fixtures)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(fixtures)
View(fixtures)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(fixtures)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
View(return_table)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(fixtures)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/bet_strategy.R')
View(return_table)
View(fixtures)
View(df_prediction)
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
source('C:/Users/h.detsis/source/repos/Various-projects/R/EPL/betting/prediction.R')
View(fixtures)
View(df_prediction)
View(df_prediction)
write.xlsx(df_prediction, "data.xlsx")
library(xlsx)
package.install("xlsx")
install.packages("xlsx")
library(xlsx)
write.xlsx(df_prediction, "data.xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
write.table(df_prediction, "data.txt", sep="\t")
